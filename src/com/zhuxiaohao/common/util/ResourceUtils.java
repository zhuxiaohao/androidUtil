package com.zhuxiaohao.common.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import android.content.Context;

/**
 * ClassName: ResourceUtils <br/>
 * Function: TODO ADD FUNCTION. <br/>
 * Reason: TODO ADD REASON(可选). <br/>
 * date: 2014年11月20日 下午4:59:53 <br/>
 * Android Resource工具类， 可用于从android资源目录的raw和assets目录读取内容，
 * 如：geFileFromAssets(Context context, String fileName) 得到assets目录下某个文件内容<br/>
 * geFileFromRaw(Context context, int resId) 得到raw目录下某个文件内容<br/>
 * 
 * @author chenhao
 * @version
 * @since JDK 1.6
 */
public class ResourceUtils {

	private ResourceUtils() {
		throw new AssertionError();
	}

	/**
	 * 　　*资产使用ACCESS_STREAMING模式。这提供了对文件的访问 　　*与应用程序捆绑在一起,作为资产的——也就是说,文件
	 * 　　*放在“资产”目录。
	 * 
	 * @param context
	 * @param fileName
	 *            The name of the asset to open. This name can be hierarchical.
	 * @return
	 */
	public static String geFileFromAssets(Context context, String fileName) {
		if (context == null || StringUtils.isEmpty(fileName)) {
			return null;
		}

		StringBuilder s = new StringBuilder("");
		try {
			InputStreamReader in = new InputStreamReader(context.getResources().getAssets().open(fileName));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				s.append(line);
			}
			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 从一个原始资源获取内容。这只能使用资源,其价值是资产文件的名字——也就是说,它可以用来打开可拉的,声音,和原始资源;它会失败在字符串和颜色资源。
	 * 
	 * @param context
	 * @param resId The resource identifier to open, as generated by the appt tool.
	 * @return
	 */
	public static String geFileFromRaw(Context context, int resId) {
		if (context == null) {
			return null;
		}

		StringBuilder s = new StringBuilder();
		try {
			InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(resId));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				s.append(line);
			}
			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * same to {@link ResourceUtils#geFileFromAssets(Context, String)}, but
	 * return type is List<String>
	 * 
	 * @param context
	 * @param fileName
	 * @return
	 */
	public static List<String> geFileToListFromAssets(Context context, String fileName) {
		if (context == null || StringUtils.isEmpty(fileName)) {
			return null;
		}

		List<String> fileContent = new ArrayList<String>();
		try {
			InputStreamReader in = new InputStreamReader(context.getResources().getAssets().open(fileName));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				fileContent.add(line);
			}
			br.close();
			return fileContent;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * same to {@link ResourceUtils#geFileFromRaw(Context, int)}, but return
	 * type is List<String>
	 * 
	 * @param context
	 * @param resId
	 * @return
	 */
	public static List<String> geFileToListFromRaw(Context context, int resId) {
		if (context == null) {
			return null;
		}

		List<String> fileContent = new ArrayList<String>();
		BufferedReader reader = null;
		try {
			InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(resId));
			reader = new BufferedReader(in);
			String line = null;
			while ((line = reader.readLine()) != null) {
				fileContent.add(line);
			}
			reader.close();
			return fileContent;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}
}
